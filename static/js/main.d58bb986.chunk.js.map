{"version":3,"sources":["chirp-context/chirpContext.js","components/pictures/coffee-expresso.jpg","components/pictures/colorful-parrots.jpg","components/pictures/old-telephones.jpg","components/pictures/typerwriter.jpg","components/site-button.js","components/Landing-page/landing-page.js","components/Message-board/Post.js","components/pictures/chirping-bird.jpg","components/Message-board/message-board.js","components/Profile-page/profile-page.js","App.js","index.js"],"names":["chirpContext","React","createContext","mbTitle","showThread","createNewThread","posts","handleCreateThread","handleCreatePost","handleEditPost","handleDeletePost","SiteButton","props","className","children","landingPage","Consumer","context","id","src","ColorfulParrots","alt","OldTelephone","to","style","fontSize","CoffeeExpresso","Typewriter","Post","state","showDetails","isReplying","isEdited","isDeleted","isSaved","post","this","toggleThread","setState","handleTextareaEdit","e","replyToBeEdited","target","value","toggleCancel","handleChirp","buildToggleDelete","replyId","window","confirm","deleteReply","postId","buildHandleSave","addReply","previousElementSibling","buildHandleSaveOnEdit","editReply","replyIdToBeEdited","replyNameToBeEdited","postTitle","participantsInitials","numOfReplies","timeOpen","onClick","colspan","icon","replies","map","reply","content","replyName","parentElement","innerText","toggleEdit","name","onChange","Component","messageBoard","isCreatingPost","showAddForm","handleShowAddForm","ChirpingBird","onSubmit","prevent","default","createNewPost","postContent","buildHandleSubmitForm","type","defaultValue","idx","profilePage","App","numOfParticipants","Math","random","prevState","matchingPost","find","push","length","handleEditReply","handleDeleteReply","console","log","contextValue","Provider","exact","path","component","contextType","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d58bb986.chunk.js","sourcesContent":["import React from 'react';\n\nconst chirpContext = React.createContext({\n  mbTitle: [],\n  showThread: [],\n  createNewThread: [],\n  posts: [],\n  handleCreateThread: () => { },\n  handleCreatePost: () => { },\n  handleEditPost: () => { },\n  handleDeletePost: () => { }\n})\n\nexport default chirpContext;","export default __webpack_public_path__ + \"static/media/coffee-expresso.31fb8635.jpg\";","export default __webpack_public_path__ + \"static/media/colorful-parrots.711a6a95.jpg\";","export default __webpack_public_path__ + \"static/media/old-telephones.36d67495.jpg\";","export default __webpack_public_path__ + \"static/media/typerwriter.81be67e0.jpg\";","import React from 'react';\nimport './site-button.css';\n\nconst SiteButton = (props) => {\n  return (\n    // .children allows multiple components to access, adding all attribute props\n    <button className=\"site-button\" {...props}>{props.children}</button>\n  )\n}\n\nexport default SiteButton;\n\n\n","import React from 'react';\nimport chirpContext from '../../chirp-context/chirpContext';\nimport { Link } from 'react-router-dom';\n// import ChirpingBird from '../pictures/chirping-bird.jpg'\nimport CoffeeExpresso from '../pictures/coffee-expresso.jpg'\nimport ColorfulParrots from '../pictures/colorful-parrots.jpg'\nimport OldTelephone from '../pictures/old-telephones.jpg'\nimport Typewriter from '../pictures/typerwriter.jpg'\nimport SiteButton from '../site-button'\nimport './landing-page.css';\n\n\n\n// edited text should only appear once with text-box around it\n// delete should bring up prompt, button should disappear, and reply should be removed upon confirmation ||  \n// style all buttons using separate component\n/* \nresize expresso photo/ all photos to take up width of container, \nstart with 1st image on load and then transition after 3-4 sec\n*/\n// separate post, reply in some manner\n\n\nconst landingPage = () => {\n  return (\n    <chirpContext.Consumer>\n      {(context) => {\n        return (\n          <div id=\"landing-page-container\">\n            <div className=\"container\">\n              <div id=\"content-slider\">\n                <div id=\"slider\">\n                  <div id=\"mask\">\n                    <img className=\"parrots\" src={ColorfulParrots} alt=\"vivid parrots up close in the wild\" />\n                    <img className=\"rotary\" src={OldTelephone} alt=\"three old rotary phones lined up against a wall\" />\n                  </div>\n                  <div className=\"progress-bar\"></div>\n                </div>\n              </div>\n            </div>\n            <h1 id=\"site-title\">Welcome to Chirp-(En-Passant)!</h1>\n            <h2>(An online discussion board)</h2>\n            {/* style button to match carosel || have a className=\"siteButton\" */}\n            <Link to=\"/message-board\"><SiteButton style={{ fontSize: \".9em\" }}>Let's Get Started!</SiteButton></Link>\n            <br />\n            <div id=\"content-slider\">\n              <div id=\"slider\">\n                <div id=\"mask\">\n                  <img className=\"expresso\" src={CoffeeExpresso} alt=\"Circular table with cups containing different shades of expresso\" />\n                  <img className=\"typewriter\" src={Typewriter} alt=\"Old typewriter\" />\n                </div>\n                <div className=\"progress-bar\"></div>\n              </div>\n            </div>\n          </div>\n        )\n      }}\n    </chirpContext.Consumer>\n  )\n}\n\nexport default landingPage;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport chirpContext from '../../chirp-context/chirpContext';\nimport './Post.css';\nimport SiteButton from '../site-button';\n\n\n/*\nedit\n  only drop/cancel buttons should appear once clicking edit button\n  edit/drop button should return upon clicking save\ndelete\n  only delete button should appear after clicking delete + prompt\n  edit/delete button should disappear after confirming delete\n */\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showDetails: false,\n      isReplying: false,\n      isEdited: false,\n      isDeleted: false,\n      isSaved: false,\n      // replyToBeEdited: '',\n      // replyIdToBeEdited: -1,\n      // replyNameToBeEdited: '',\n    }\n  }\n  render() {\n    const { post } = this.props;\n\n    const toggleThread = () => {\n      this.setState({\n        showDetails: !this.state.showDetails\n      })\n    }\n\n    const toggleEdit = (e, replyId, replyName) => {\n      // console.log(e.target.parentElement.previousElementSibling.innerText)\n      this.setState({\n        // statePropety: value from function\n        isEdited: true,\n        isReplying: false,\n        isDeleted: false,\n        replyToBeEdited: e.target.parentElement.previousElementSibling.innerText,\n        replyIdToBeEdited: replyId,\n        replyNameToBeEdited: replyName\n      })\n    }\n\n    const handleTextareaEdit = (e) => {\n      this.setState({ replyToBeEdited: e.target.value })\n    }\n\n    const toggleCancel = () => {\n      this.setState({\n        isEdited: false\n      })\n    }\n\n    const handleChirp = () => {\n      // creating ui for reply\n      this.setState({\n        isReplying: true\n      })\n    }\n\n    const buildToggleDelete = (context, replyId) => (e) => {\n      if (!window.confirm('This reply will be deleted.')) return\n      this.setState({\n        // find reply that matches post && remove it\n        isDeleted: true,\n        isEdited: false,\n        isReplying: false,\n      })\n      context.deleteReply(post.postId, replyId)\n\n    }\n\n    const buildHandleSave = context => (e) => {\n      context.addReply(post.postId, e.target.previousElementSibling.value);\n      this.setState({ isReplying: false })\n    }\n\n    const buildHandleSaveOnEdit = context => (e) => {\n      context.editReply(post.postId, this.state.replyIdToBeEdited, this.state.replyToBeEdited, this.state.replyNameToBeEdited)\n      this.setState({ isEdited: false })\n    }\n\n\n    return (\n      <chirpContext.Consumer>\n        {context => {\n          return (\n            < tbody key={post.postId}>\n              <tr id=\"tr-threads\">\n                <td>{post.postTitle}</td>\n                <td>{post.participantsInitials}</td>\n                <td>{post.numOfReplies}</td>\n                <td className=\"time-open-column\">{post.timeOpen}</td>\n                <td><button onClick={toggleThread}>⬇</button></td>\n              </tr>\n\n              {this.state.showDetails ?\n                <>\n                  <tr>\n                    <td colspan={6}>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed at velit eu erat dapibus molestie. Duis lorem mi, facilisis id consequat eleifend, rutrum vel dolor.\n                    <section></section>\n                      {/* stateful logic to display textarea */}\n                      {this.state.isReplying ?\n                        <>\n                          <textarea></textarea>\n                          <SiteButton onClick={buildHandleSave(context)}>Save</SiteButton>\n                        </> :\n                        // onClick of 'Chirp' buttton opens up form with an empty textbox to render input from user --clicking on 'Save' button will submit user input and add reply to message board \n                        <SiteButton onClick={handleChirp}>Chirp <FontAwesomeIcon icon={['fas', 'blog']} /></SiteButton>\n                      }\n                    </td>\n                  </tr>\n                  <tr className=\"replies-section\" key={post.replies.name}>\n                    <td colspan={6}>\n                      {post.replies.map(reply => {\n                        return (\n                          <>\n                            {!this.state.isEdited &&\n                              <section className=\"reply-section\">{reply.content}</section>\n                            }\n                            <div className=\"thread-btns\">\n                              {/* document.getElementById = previousElementSibling */}\n                              {!this.state.isEdited && <SiteButton onClick={(e) => toggleEdit(e, reply.replyId, reply.name)}>Edit <FontAwesomeIcon icon={['fas', 'edit']} /> </SiteButton>}\n                              {!this.state.isDeleted && !this.state.isEdited && <SiteButton onClick={buildToggleDelete(context, reply.replyId)}>Drop <FontAwesomeIcon icon={['fas', 'trash']} /></SiteButton>}\n                            </div>\n                          </>\n                        )\n                      })}\n                    </td>\n                  </tr>\n                  {/* edit figure out how to replace a reply with the text area that you're conditionally rendering */}\n                  {this.state.isEdited ? (\n                    <tr>\n                      <td colspan={6}>\n                        {/* siblings are vertical */}\n                        <textarea value={this.state.replyToBeEdited} onChange={handleTextareaEdit} />\n                        <div>\n                          <SiteButton onClick={toggleCancel}>Cancel</SiteButton>\n                          <SiteButton onClick={buildHandleSaveOnEdit(context)}>Save</SiteButton> {/* saves updated post, changes state variable from true to false */}\n                        </div>\n                      </td>\n                    </tr>\n                  ) : null\n                  }\n                  {/* delete */}\n                </> : null\n              }\n            </tbody>\n          )\n        }\n        }\n      </chirpContext.Consumer >\n    )\n  }\n}\n\nexport default Post;\n\n\n\n    // handling logic for updating reply (moved functionalty over to app and then called editReply fx within Post)\n    // const handleSave = (e) => {\n    // calls fx from app\n    //what info does handleSave need?\n    // the id of the post\n    // know which reply (replyId)\n    // text from the input field\n\n    // how do you use that info to solve the problem\n    // find the correct post // how: find postId\n    // find the correct reply\n    // find replyId // update reply //assign reply with new data\n\n    // post.postId, postId\n    // post.replies[replyId - 1].replyId, replyId\n    // DOM traversal: (S) Save button (E) textarea\n    // innerText vs. value\n    // let matchingPostId = post.postId;\n    // console.log(matchingPostId)\n    // let matchingReplyId = this.state.replyIdToBeEdited;\n    // console.log(matchingReplyId)\n    // let editedReply = e.target.parentNode.firstChild.value;\n    // console.log(editedReply)\n    // let replyName;\n    // this.setState({\n    //   isEdited: false,\n    //   isReplying: false,\n    //   replyToBeEdited: ''\n    // })\n    // }\n\n    // ToDo's: 4/2\n    // textarea should appear and nothing else -->\n    // textarea should close and new text should render \n    // delete button is being removed instead of text upon click of 'drop'\n    // drop button shouldn't appear upon clicking edit\n","export default __webpack_public_path__ + \"static/media/chirping-bird.d38cb81b.jpg\";","import React from 'react';\nimport chirpContext from '../../chirp-context/chirpContext';\nimport { Link } from 'react-router-dom';\nimport './message-board.css';\nimport Post from './Post';\nimport ChirpingBird from '../pictures/chirping-bird.jpg';\nimport SiteButton from '../site-button';\n\n\nclass messageBoard extends React.Component {\n  state = {\n    isCreatingPost: false,\n    showAddForm: false\n  }\n  render() {\n    // (useHistory hook for MVP) state = {\n    //   selected: ''\n    // }\n    // function HandleClickToProfilePage(e) {\n    //   let history = useHistory(e.target);\n    //   history.push('/profile');\n    // }\n    // function HandClickToMyPostsPage(e) {\n    //   let history = useHistory(e.target);\n    //   history.push('/my-posts')\n    // }\n    // function HandleClickToHomePage(e) {\n    //   let history = useHistory(e.target);\n    //   history.push('/');\n    // }\n    // https://reactrouter.com/web/api/Hooks; https://stackoverflow.com/questions/51337618/reactjs-modifying-state-and-changing-url-onchange;\n\n    const handleShowAddForm = () => {\n      this.setState({ showAddForm: true })\n    }\n\n    const buildHandleSubmitForm = context => (e, post) => {\n      e.prevent.default();\n      context.createNewPost(post.postId, this.state.postTitle, this.state.postContent)\n      this.setState({\n        isCreatingPost: true\n      })\n    }\n\n    return (\n      <chirpContext.Consumer>\n        {(context) => {\n          return (\n            <div id=\"mb-container\">\n              <img src={ChirpingBird} alt=\"bird chirping on a tree branch\" />\n              <h1 id=\"mb-page-title\">Chirp(En-Passant) Message Board:</h1>\n              {/* <img src=\"search-bar-icon\" alt=\"search bar icon for message board\" /> */}\n              <div id=\"mb-links\">\n                <Link to=\"/\" key={'/'}>Home</Link>\n                <Link to=\"/profile\" key={'/profile'}>My Profile</Link>\n              </div>\n              {/* \n              desired outcome: when 'Create New Post' is clicked show form, input desired text, close up submit and display new Post\n              currently: clicking 'Create New Post' renders input fields and clicking 'Chirp!' (submit) only re-renders page\n               */}\n              {!this.state.showAddForm ?\n                <SiteButton onClick={handleShowAddForm}>Create New Post</SiteButton> :\n                <>\n                  <form className=\"form-inline\" onSubmit={(e) => buildHandleSubmitForm(e, context)}>\n                    <label className=\"ptl\">Title:</label>\n                    {/* eslint-disable-next-line */}\n                    <input className=\"post-title\" onChange={(e) => this.setState({ postTitle: e.target.value })} value={this.state.postTitle} type=\"text\" id=\"new-post-title\" defaultValue=\"New ish\" />\n                    <label className=\"pcl\">Topic:</label>\n                    {/* eslint-disable-next-line */}\n                    <input className=\"post-content\" onChange={(e) => this.setState({ postContent: e.target.value })} value={this.state.postContent} type=\"text\" id=\"new-post-topic\" defaultValue=\"down 4 and 7 beers ago...\" />\n                    <SiteButton type=\"submit\">Chirp!</SiteButton>\n                  </form>\n                </>\n              }\n              <table id=\"mb-table\">\n                <thead>\n                  <tr id=\"table-row\">\n                    <th>Title</th>\n                    <th>Participants</th>\n                    <th># of Messages in Thread</th>\n                    <th className=\"open-since-column\" >Open Since</th>\n                  </tr>\n                </thead>\n                {context.posts.map((post, idx) => {\n                  return (\n                    <Post post={post} />\n                  )\n                })}\n              </table>\n              {/* delete */}\n            </div>\n          )\n        }}\n      </chirpContext.Consumer>\n    )\n  }\n}\n\nexport default messageBoard;\n\n\n/*\n */\n// Create it in JSX\n// create state....method to update state\n/* (MVP) <select name=\"drop-down-for-mb\" id=\"drop-down-for-mb\" onChange={e.target}>\n<option value=\"my-profile\" onChange={() => HandleClickToProfilePage}>My Profile</option>\n<option value=\"my-posts\" onChange={() => HandClickToMyPostsPage}>My Posts</option>\n<option value=\"landing-page\" onChange={() => HandleClickToHomePage}>Chirp Home Page</option>\n</select> */\n","import React from 'react';\nimport chirpContext from '../../chirp-context/chirpContext';\n// import { Link } from 'react-router-dom';\nimport './profile-page.css';\n\n\nconst profilePage = () => {\n\n  return (\n    <chirpContext.Consumer>\n      {(context) => {\n        return (\n          <div id=\"profile-container\">\n            <h1 id=\"profile-title\">My Profile: [Coming Soon..!]</h1>\n            {/* <div>\n              <img src=\"search-bar-icon\" alt=\"search bar icon to search through messages\" />\n              <!-- links route to corresponding pages; hamburger for 'options' below -->\n              <div id=\"profile-links\">\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/message-board\">Message Board</Link>\n                <Link to=\"/my-posts\">Show All Posts</Link>\n              </div>\n              <Link to=\"sign-out\">More Options Coming Soon..!</Link>\n              <!-- edit/add new photo 'pencil' btn upon click-->\n              <i className=\"far fa-user-circle\"></i>\n              <section>\n                <ul>Test-User</ul>\n                <!-- expand on click; ref using this.state.testUser.date?-->\n                <ul>Recent Posts</ul>\n                <ul>Current Date/Time</ul>\n              </section>\n            </div> */}\n          </div>\n        )\n      }}\n    </chirpContext.Consumer>\n  )\n}\n\nexport default profilePage;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport landingPage from './components/Landing-page/landing-page';\nimport messageBoard from './components/Message-board/message-board';\nimport profilePage from './components/Profile-page/profile-page';\nimport chirpContext from './chirp-context/chirpContext';\nimport './App.css';\n// check relative paths\nclass App extends React.Component {\n  static contextType = chirpContext;\n  state = {\n    posts: [\n      {\n        postId: 1,\n        postTitle: 'Best Editor EVER!',\n        participantsInitials: 'M, K',\n        numOfParticipants: 2,\n        numOfReplies: 27,\n        replies: [{\n          replyId: 1,\n          name: 'Mike says:',\n          content: 'This is a great post!'\n        }],\n        timeOpen: '2 days'\n      },\n      {\n        postId: 2,\n        postTitle: '26 Days of X-mas?!',\n        participantsInitials: 'M, K, T, L',\n        numOfParticipants: 4,\n        numOfReplies: 175,\n        replies: [{\n          replyId: 1,\n          name: 'Karen says:',\n          content: 'That would be great, I wish this holiday was longer!!'\n        }],\n        timeOpen: '3 weeks'\n      },\n      {\n        postId: 3,\n        postTitle: 'Top Specialities in Tech',\n        participantsInitials: 'K, M, L, S, S.A',\n        numOfParticipants: 5,\n        numOfReplies: 67,\n        replies: [{\n          replyId: 1,\n          name: 'Kris',\n          content: 'Cyber security is a popular speciality now-a-days'\n        }],\n        timeOpen: '3 days'\n      },\n      {\n        postId: 4,\n        postTitle: 'My First Project EVER! (Share and Discuss)',\n        participantsInitials: 'M, K, A, B, T, D, L',\n        numOfParticipants: 7,\n        numOfReplies: 184,\n        replies: [{\n          replyId: 1,\n          name: 'Bob',\n          content: 'This was my first post ever, check it out...'\n        }],\n        timeOpen: '2 months'\n      },\n      {\n        postId: 5,\n        postTitle: 'AMA Forum',\n        participantsInitials: 'M, K, D, B, S',\n        numOfParticipants: 5,\n        numOfReplies: 12,\n        replies: [\n          {\n            replyId: 1,\n            name: 'Derek says:',\n            content: 'What is the last song you listened to?'\n          },\n          {\n            replyId: 2,\n            name: 'Austin says:',\n            content: 'Californication brother!'\n          },\n        ],\n        timeOpen: '3 hours'\n      }\n    ]\n  }\n\n  createNewPost = (postTitle, postContent) => {\n    const newPost = this.setState({\n      //  use UUID pass UUID --> would include in .then(setState({...UUID})) to give to server\n      postId: Math.random(),\n      postTitle: postTitle,\n      postContent: postContent\n    })\n    return newPost\n  }\n\n  addReply = (postId, reply) => {\n    this.setState((prevState) => {\n      // finds the post with matching id goes into that post's reply, reconstructing new object within array to account for other properties reply has\n      let matchingPost = prevState.posts.find(post => post.postId === postId)\n      prevState.posts[postId - 1].replies.push({\n        content: reply,\n        replyId: matchingPost.replies.length + 1\n      })\n      return prevState\n    })\n  }\n\n  handleEditReply = (postId, replyId, reply, replyName) => {\n    this.setState(prevState =>\n      // exact reply to change\n      prevState.posts[postId - 1].replies[replyId - 1] = {\n        replyId: replyId,\n        name: replyName,\n        content: reply\n      }\n    )\n  }\n\n\n  handleDeleteReply = (postId, replyId) => {\n    // const deletedPost = this.state.posts.filter(post => post.postId !== postId)\n    this.setState(prevState => {\n      delete prevState.posts[postId - 1].replies[replyId - 1]\n      console.log(prevState, postId - 1, replyId - 1)\n      return prevState\n    }\n    )\n  }\n\n  render() {\n    const contextValue = {\n      posts: this.state.posts,\n      createNewPost: this.createNewPost,\n      addReply: this.addReply,\n      editReply: this.handleEditReply,\n      deleteReply: this.handleDeleteReply,\n      handleCreatePost: this.handleCreatePost,\n      handleEditPost: this.handleEditPost,\n      handleDeletePost: this.handleDeletePost\n    }\n    return (\n      <chirpContext.Provider value={contextValue}>\n        <Route exact path=\"/\" component={landingPage}>\n        </Route>\n        <Route path=\"/message-board\" component={messageBoard}>\n        </Route>\n        <Route path=\"/profile\" component={profilePage}>\n        </Route>\n      </chirpContext.Provider>\n    );\n  }\n}\nexport default App;\n\n\n/*\n4/7\n\ncommit after completing each feature\n\n(MVP)\nI was wondering if you could help me outline the steps to:\n[] 'createPost' component\n  make createPost button\n  make route tag for /createPost\n  make your createPost component && showAddForm\n  fill in JSX\n    form\n    controlled inputs\n    formSubmit handler uses fx in app for submitHanlder to call (through context)\n\n[] give ability to log in as different users\n\nevents issues:\n  [x]reply isn't appearing upon save\n  [x]edit/delete: TypeError: Cannot read property 'innerText' of null\n[x]not seeing styling for button in site-button component\nwant to hide openSince column with smaller screen sizes\n\nNode Js Interview next Monday\n  // express: handle all routes, make router, make middleware,\n  // knex how to make tables, alter, make foreign keys\n\n\nThinkful Sessions:\n  package-lock.json: keep all my files locked at this version\n  process.env says run my environmental variable on whatever server I'm on\n  vercel --prod skips preview step and deploys in one step\n  how to use gitHub pages\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport './components/font-awesome';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}